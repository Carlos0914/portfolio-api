org: carloslop0914
app: portfolio-api
service: portfolio-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  environment: 
    MONGODB_DATA_API_URL: ${param:mongodb-data-api-url}
    MONGODB_DATA_API_KEY: ${param:mongodb-data-api-key}
    MONGODB_DATA_SOURCE: ${param:data-source}
    DB_NAME: ${param:database-name}
    ASSETS_BUCKET: ${param:assets-bucket}
  httpApi:
    cors: true

resources:
  Resources:
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: carloslopez-portfolio-assets
        AccessControl: PublicRead
    UploadRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: upload-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource:
                    !Sub
                      - "arn:aws:s3:::${BucketName}/*"
                      - {BucketName: !Ref AssetsBucket}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    Fn::Sub:
                      - arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/*:*:*
                      - { Region: !Ref AWS::Region, AccountId: !Ref AWS::AccountId }

functions:
  - ${file(./routes/functionsSpec.yml)}
  - ${file(./routes/projects.yml)}
  - ${file(./routes/assets.yml)}

plugins:
  - serverless-offline
